upstream sorting_visualizer_app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:/var/www/sorting-visualizer/run/gunicorn.sock fail_timeout=0;
}

server {
	listen 80;
	listen [::]:80;
	server_name sorting-visualizer.dami.li www.sorting-visualizer.dami.li;
	return 301 https://$server_name$request_uri;
}
server {

    server_name sorting-visualizer.dami.li;

    listen 443 ssl;

    ssl_certificate /etc/letsencrypt/live/sorting-visualizer.dami.li/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/sorting-visualizer.dami.li/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/sorting-visualizer.dami.li/chain.pem;

    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 127.0.0.1 8.8.8.8;
    add_header Strict-Transport-Security "max-age=31536000";

    add_header Content-Security-Policy "img-src https: data:; upgrade-insecure-requests";

    client_max_body_size 1G;

    access_log /var/log/nginx/sorting-visualizer-access.log;
    error_log /var/log/nginx/sorting-visualizer-error.log;

    location /static/ {
        alias   /var/www/sorting-visualizer/static/;
    }

    location /media/ {
        alias   /var/www/sorting-visualizer/media/;
    }

    location /robots.txt {
        alias /var/www/sorting-visualizer/robots.txt;
    }

    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        proxy_pass http://sorting_visualizer_app_server;
        break;
    }

    # Error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /var/www/sorting-visualizer/static/;
    }
}
